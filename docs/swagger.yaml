basePath: /api/v1
definitions:
  form.ActionForm:
    properties:
      action:
        type: string
    type: object
  form.AuthorForm:
    properties:
      about:
        type: string
      name:
        description: Id       string `json:"id"`
        type: string
      photoUrl:
        type: string
    required:
    - name
    type: object
  form.BookForm:
    properties:
      authorIds:
        items:
          type: string
        type: array
      categoryIds:
        items:
          type: string
        type: array
      description:
        type: string
      file:
        type: string
      image:
        type: string
      link:
        type: string
      publisher:
        type: string
      releaseAt:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  form.BookResponse:
    properties:
      authorIds:
        items:
          type: string
        type: array
      authors:
        items:
          $ref: '#/definitions/model.Author'
        type: array
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      categoryIds:
        items:
          type: string
        type: array
      createAt:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      link:
        type: string
      publisher:
        type: string
      rating:
        type: number
      releaseAt:
        type: string
      reviews:
        items:
          $ref: '#/definitions/form.ReviewResp'
        type: array
      title:
        type: string
    type: object
  form.CategoryForm:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  form.FavoriteForm:
    properties:
      action:
        type: string
      favoriteCategoryId:
        type: string
      favoriteId:
        type: string
    type: object
  form.ReportForm:
    properties:
      reason:
        type: string
      reviewId:
        type: string
    required:
    - reviewId
    type: object
  form.ReviewForm:
    properties:
      bookId:
        type: string
      comment:
        type: string
      id:
        type: string
      rating:
        type: integer
      username:
        type: string
    required:
    - bookId
    type: object
  form.ReviewResp:
    properties:
      bookId:
        type: string
      comment:
        type: string
      id:
        type: string
      rating:
        type: integer
      reportCount:
        type: integer
      reports:
        items:
          $ref: '#/definitions/model.Report'
        type: array
      updateAt:
        type: string
      upvoteCount:
        type: integer
      upvotes:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/form.UserComment'
        type: object
      username:
        type: string
    type: object
  form.ReviewResponse:
    properties:
      avgRating:
        type: number
      reviews:
        items:
          $ref: '#/definitions/form.ReviewResp'
        type: array
    type: object
  form.UpdateBookForm:
    properties:
      authorIds:
        items:
          type: string
        type: array
      categoryIds:
        items:
          type: string
        type: array
      description:
        type: string
      image:
        type: string
      link:
        type: string
      publisher:
        type: string
      releaseAt:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  form.UpdateInformation:
    properties:
      dataLink:
        type: string
      fullName:
        type: string
      oldPassword:
        type: string
      password:
        type: string
      profileAvatar:
        type: string
    type: object
  form.UpdateUser:
    properties:
      roles:
        items:
          type: string
        type: array
      usernames:
        items:
          type: string
        type: array
    type: object
  form.User:
    properties:
      favoriteCategoryIds:
        items:
          type: string
        type: array
      fullName:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - fullName
    - password
    - username
    type: object
  form.UserComment:
    properties:
      fullName:
        type: string
      id:
        type: string
      profileAvatar:
        type: string
      username:
        type: string
    type: object
  form.UserResponse:
    properties:
      dataLink:
        type: string
      favoriteBooks:
        items:
          $ref: '#/definitions/form.BookResponse'
        type: array
      favoriteCategories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      favoriteCategoryIds:
        items:
          type: string
        type: array
      favoriteIds:
        items:
          type: string
        type: array
      fullName:
        type: string
      id:
        type: string
      profileAvatar:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  model.Author:
    properties:
      about:
        type: string
      id:
        type: string
      name:
        type: string
      photoURL:
        type: string
    type: object
  model.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  model.Report:
    properties:
      createAt:
        type: string
      id:
        type: string
      reason:
        type: string
      reviewId:
        type: string
      username:
        type: string
    type: object
  model.Review:
    properties:
      bookId:
        type: string
      comment:
        type: string
      id:
        type: string
      rating:
        type: integer
      updateAt:
        type: string
      upvotes:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  model.User:
    properties:
      dataLink:
        type: string
      favoriteCategoryIds:
        items:
          type: string
        type: array
      favoriteIds:
        items:
          type: string
        type: array
      fullName:
        type: string
      id:
        type: string
      password:
        type: string
      profileAvatar:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
host: localhost:8585
info:
  contact:
    email: lhthang.1998@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is a backend for uit-library
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: UIT-Libray API
  version: "1.0"
paths:
  /authors:
    get:
      consumes:
      - application/json
      description: Get all authors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Author'
            type: array
      summary: Get all authors
      tags:
      - AuthorController
    post:
      consumes:
      - application/json
      description: Create author
      parameters:
      - description: Author
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/form.AuthorForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Author'
      security:
      - ApiKeyAuth: []
      summary: Create author
      tags:
      - AuthorController
  /authors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Author'
      security:
      - ApiKeyAuth: []
      summary: Delete author
      tags:
      - AuthorController
    get:
      consumes:
      - application/json
      description: Get author by id
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Author'
            type: array
      summary: Get author by id
      tags:
      - AuthorController
    put:
      consumes:
      - application/json
      description: Update author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      - description: AuthorForm
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/form.AuthorForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Author'
      security:
      - ApiKeyAuth: []
      summary: Update author
      tags:
      - AuthorController
  /authors/{id}/books:
    get:
      consumes:
      - application/json
      description: Get books by author id
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get books by author id
      tags:
      - AuthorController
  /books:
    get:
      consumes:
      - application/json
      description: Get all books
      parameters:
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Query
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get all books
      tags:
      - BookController
    post:
      consumes:
      - application/json
      description: Create book
      parameters:
      - description: BookForm
        in: body
        name: bookForm
        required: true
        schema:
          $ref: '#/definitions/form.BookForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.BookResponse'
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - BookController
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.BookResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete book by id
      tags:
      - BookController
    put:
      consumes:
      - application/json
      description: Update book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: BookForm
        in: body
        name: bookForm
        required: true
        schema:
          $ref: '#/definitions/form.UpdateBookForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.BookResponse'
      security:
      - ApiKeyAuth: []
      summary: Update book by id
      tags:
      - BookController
  /books/book/{id}:
    get:
      consumes:
      - application/json
      description: Get book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.BookResponse'
      summary: Get book by id
      tags:
      - BookController
  /books/book/{id}/similar:
    get:
      consumes:
      - application/json
      description: Get similar books
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get similar books
      tags:
      - BookController
  /books/get-high-rated:
    get:
      consumes:
      - application/json
      description: Get high rated books
      parameters:
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get high rated books
      tags:
      - BookController
  /books/get-latest:
    get:
      consumes:
      - application/json
      description: Get new books
      parameters:
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get new books
      tags:
      - BookController
  /books/get-popular:
    get:
      consumes:
      - application/json
      description: Get popular books
      parameters:
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get popular books
      tags:
      - BookController
  /books/recommend:
    get:
      consumes:
      - application/json
      description: Get popular books
      parameters:
      - description: Skip
        in: query
        name: skip
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Categories
        in: query
        name: categories
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.BookResponse'
            type: array
      summary: Get popular books
      tags:
      - BookController
  /books/upload:
    post:
      consumes:
      - application/json
      description: Upload file
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/string'
      security:
      - ApiKeyAuth: []
      summary: Upload file
      tags:
      - BookController
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: Get all categories
      tags:
      - CategoryController
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/form.CategoryForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - CategoryController
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - CategoryController
    get:
      consumes:
      - application/json
      description: Get category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: Get category by id
      tags:
      - CategoryController
    put:
      consumes:
      - application/json
      description: Update category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: CategoryForm
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/form.CategoryForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - CategoryController
  /reports:
    post:
      consumes:
      - application/json
      description: Create report
      parameters:
      - description: Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/form.ReportForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Create report
      tags:
      - ReportController
  /reviews:
    get:
      consumes:
      - application/json
      description: Get all reviews
      parameters:
      - description: Report
        in: query
        name: report
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Review'
            type: array
      summary: Get all reviews
      tags:
      - ReviewController
    post:
      consumes:
      - application/json
      description: Create review
      parameters:
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/form.ReviewForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Create review
      tags:
      - ReviewController
  /reviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete review by id
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Review'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Delete review by id
      tags:
      - ReviewController
    get:
      consumes:
      - application/json
      description: Get review by id
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      summary: Get review by id
      tags:
      - ReviewController
    put:
      consumes:
      - application/json
      description: Update review
      parameters:
      - description: ReviewID
        in: path
        name: id
        required: true
        type: string
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/form.ReviewForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Update review
      tags:
      - ReviewController
  /reviews/{id}/action:
    post:
      consumes:
      - application/json
      description: Vote review
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      - description: Action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/form.ActionForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Vote review
      tags:
      - ReviewController
  /reviews/{id}/admin:
    delete:
      consumes:
      - application/json
      description: Delete review by id with admin role
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Review'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Delete review by id with admin role
      tags:
      - ReviewController
  /reviews/{id}/book:
    get:
      consumes:
      - application/json
      description: Get reviews by book
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.ReviewResponse'
            type: array
      summary: Get reviews by book
      tags:
      - ReviewController
  /reviews/{id}/reports:
    get:
      consumes:
      - application/json
      description: Get report by review id
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Report'
      summary: Get report by review id
      tags:
      - ReportController
  /sign-up:
    post:
      consumes:
      - application/json
      description: Sign up
      parameters:
      - description: User
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/form.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Sign up
      tags:
      - UserController
  /users:
    get:
      consumes:
      - application/json
      description: Get all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/form.UserResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all user
      tags:
      - UserController
  /users/favorites:
    put:
      consumes:
      - application/json
      description: Add favorite book
      parameters:
      - description: Favorite Form
        in: body
        name: favoriteForm
        required: true
        schema:
          $ref: '#/definitions/form.FavoriteForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Add favorite book
      tags:
      - UserController
  /users/get-username/{username}:
    get:
      consumes:
      - application/json
      description: Get user by Username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by Username
      tags:
      - UserController
  /users/get/{id}:
    get:
      consumes:
      - application/json
      description: Get user by Id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/form.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by Id
      tags:
      - UserController
  /users/update-roles:
    put:
      consumes:
      - application/json
      description: Update users roles
      parameters:
      - description: Update User
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/form.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Update users roles
      tags:
      - UserController
  /users/update/{username}:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Update User
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/form.UpdateInformation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - UserController
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
