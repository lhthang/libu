basePath: /api/v1
definitions:
  form.CategoryForm:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  form.ReviewForm:
    properties:
      bookId:
        type: string
      comment:
        type: string
      id:
        type: string
      rating:
        type: integer
      username:
        type: string
    required:
    - bookId
    type: object
  form.UpdateInformation:
    properties:
      fullName:
        type: string
      oldPassword:
        type: string
      password:
        type: string
    required:
    - fullName
    type: object
  model.Book:
    properties:
      authors:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        type: string
      image:
        type: string
      link:
        type: string
      publisher:
        type: string
      releaseAt:
        type: string
      title:
        type: string
    type: object
  model.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  model.Review:
    properties:
      bookId:
        type: string
      comment:
        type: string
      id:
        type: string
      rating:
        type: integer
      updateAt:
        type: string
      username:
        type: string
    type: object
  model.User:
    properties:
      favoriteIds:
        items:
          type: string
        type: array
      fullName:
        type: string
      id:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
host: localhost:8585
info:
  contact:
    email: lhthang.1998@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is a backend for uit-library
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: UIT-Libray API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Book'
            type: array
      summary: Get all books
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: Get all categories
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/form.CategoryForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: Create category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: Delete category
    get:
      consumes:
      - application/json
      description: Get category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: Get category by id
    put:
      consumes:
      - application/json
      description: Update category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: CategoryForm
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/form.CategoryForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: Update category
  /reviews:
    post:
      consumes:
      - application/json
      description: Create review
      parameters:
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/form.ReviewForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Create review
  /reviews/{id}:
    put:
      consumes:
      - application/json
      description: Update review
      parameters:
      - description: ReviewID
        in: path
        name: id
        required: true
        type: string
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/form.ReviewForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Review'
      security:
      - ApiKeyAuth: []
      summary: Update review
  /user:
    get:
      consumes:
      - application/json
      description: Get all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all user
  /users/update/{username}:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Update User
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/form.UpdateInformation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Update user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
